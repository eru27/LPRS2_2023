#!/usr/bin/env python3
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

from common_waf import *
import avrwaf
import avrwaf.arduino

import os

###############################################################################

def prerequisites(ctx):
	ctx.load('arduino', tooldir = avrwaf.location)

def options(opt):
	opt.load('c cxx')
	# Common options.
	opt.add_option(
		'--app',
		dest = 'app',
		default = None,
		help = 'App to be uploaded to MCU'
	)
	opt.add_option(
		'--port',
		dest = 'port',
		default = None,
		help = 'Programmer port number or full file name i.e. dev file ' +
			'(2, /dev/ttyUSB2, COM2)'
	)
	opt.add_option(
		'--addr',
		dest = 'addr',
		default = None,
		help = 'Address of slave which we want to programm in chain ' +
			'(2 for motor 0, and so on)'
	)
	
	# Project specific.
	opt.add_option(
		'--wavgat',
		dest = 'wavgat',
		action = 'store_true',
		default = False,
		help = 'WAVGAT version of Arduino'
	)

def configure(cfg):
	if cfg.options.wavgat:
		cfg.env.ARDUINO_BOARD = 'WAVGAT UNO R3'
	else:
		cfg.env.ARDUINO_BOARD = 'Arduino Uno'
	if cfg.options.port:
		cfg.env.PROGRAMMER_PORT = expand_port(cfg.options.port)
	
	cfg.env.ARDUINO_LIBS = ['SoftwareSerial']
	
	cfg.env.OPT = '-Os'
	# Tools.
	cfg.load('arduino', tooldir = avrwaf.location)
	cfg.load('avr', tooldir = avrwaf.location)
	cfg.load('avrdude', tooldir = avrwaf.location)


def build(bld):
	# Build Arduino_Core.
	avrwaf.arduino.build(bld)

	for code_file in glob_apps_srcs(bld):
		name = os.path.splitext(code_file)[0]
		bld.program(
			target = name + '.elf',
			features = 'avr-hex',
			use = 'Arduino_Core',
			source = [code_file]
		)
		#TODO Move to feature.
		bld(
			rule = '"${OBJDUMP}" -S "${SRC}" > "${TGT[0]}"',
			target = name + '.asm',
			source = name + '.elf'
		)


###############################################################################
#TODO Maybe if something could to avrwaf

@after_cmd(build)
@build_context
def size(ctx):
	'''Size of firmware choosed by --app=<NAME> or all'''
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avr_size',
			source = 'build/' + a + '.elf'
		)

@build_context
def reset(ctx):
	'''Reset MCU'''
	ctx(features = 'avrdude_read_fuses')
	
@build_context
def read_fuses(ctx):
	'''Read fuses from MCU'''
	ctx(features = 'avrdude_read_fuses')

@build_context
def write_fuses(ctx):
	'''Write configured fuses from MCU'''
	ctx(features = 'avrdude_write_fuses')


def common_upload(ctx, verify_only):
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = expand_port(ctx.options.port)
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avrdude_upload',
			source = a + '.hex',
			verify_only = verify_only
		)
@after_cmd(build)
@build_context
def upload(ctx):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	common_upload(ctx, False)
@after_cmd(build)
@build_context
def verify(ctx):
	common_upload(ctx, True)
	
def debug_uart(ctx):
	if ctx.options.port:
		p = expand_port(ctx.options.port)
		ctx.exec_command2('picocom -b 115200 {}'.format(p))

###############################################################################
